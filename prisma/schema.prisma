generator client {
  provider        = "prisma-client-js"
  output          = "../app/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id                     String             @id @default(cuid())
  email                  String             @unique
  phone                  String?
  firstName              String
  lastName               String
  status                 LeadStatus         @default(NEW)
  source                 String?
  rawData                Json?
  consentEmail           Boolean            @default(false)
  consentSms             Boolean            @default(false)
  consentCall            Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  lastContactedAt        DateTime?
  convertedAt            DateTime?
  applicationStartedAt   DateTime?          // When lead started mortgage application
  applicationCompletedAt DateTime?          // When lead completed/submitted application
  pipedriveDealId        String?            // Pipedrive deal ID after conversion
  nextReviewAt           DateTime?          // For autonomous agent smart scheduling
  managedByAutonomous    Boolean            @default(false) // True if managed by new autonomous agent
  hollyDisabled          Boolean            @default(false) // True = Holly won't send any messages (manual relationship mode)
  appointments           Appointment[]
  communications         Communication[]
  activities             LeadActivity[]
  notes                  Note[]
  scheduledMessages      ScheduledMessage[]
  tasks                  Task[]
  callOutcomes           CallOutcome[]
  conversationOutcomes   ConversationOutcome[]

  @@index([email])
  @@index([phone])
  @@index([status])
  @@index([createdAt])
  @@index([applicationStartedAt])
  @@index([applicationCompletedAt])
  @@index([nextReviewAt])
  @@index([managedByAutonomous])
  @@index([hollyDisabled])
}

model LeadActivity {
  id        String                @id @default(cuid())
  leadId    String
  type      ActivityType
  channel   CommunicationChannel?
  subject   String?
  content   String?
  metadata  Json?
  createdAt DateTime              @default(now())
  lead      Lead                  @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([type])
  @@index([createdAt])
}

model Appointment {
  id               String         @id @default(cuid())
  leadId           String
  calComEventId    String?        @unique
  calComBookingUid String?        @unique
  scheduledAt      DateTime
  scheduledFor     DateTime?      // Actual appointment time (defaults to scheduledAt for backwards compatibility)
  duration         Int
  status           String
  meetingUrl       String?
  notes            String?
  advisorName      String?        // Name of advisor from Cal.com organizer
  advisorEmail     String?        // Email of advisor from Cal.com organizer
  reminder24hSent  Boolean        @default(false)
  reminder1hSent   Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  lead             Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  callOutcomes     CallOutcome[]  // Outcomes logged for this specific appointment

  @@index([leadId])
  @@index([scheduledAt])
  @@index([scheduledFor])
  @@index([advisorEmail])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  htmlBody  String
  textBody  String?
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmsTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  body      String
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationRule {
  id               String   @id @default(cuid())
  name             String
  description      String?
  triggerType      String
  triggerCondition Json
  actions          Json
  isActive         Boolean  @default(true)
  priority         Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([isActive])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  source    String
  eventType String?
  payload   Json
  processed Boolean  @default(false)
  error     String?
  createdAt DateTime @default(now())

  @@index([source])
  @@index([processed])
  @@index([createdAt])
}

model Communication {
  id         String               @id @default(cuid())
  leadId     String
  channel    CommunicationChannel
  direction  String
  content    String
  twilioSid  String?              @unique
  sendgridId String?              @unique
  sentiment  String?
  intent     String?
  metadata   Json?
  createdAt  DateTime             @default(now())
  lead       Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([channel])
  @@index([createdAt])
}

model ConversationOutcome {
  id              String   @id @default(cuid())
  leadId          String
  messageSent     String   // What Holly said
  leadResponse    String?  // What lead said back (null if they didn't respond)
  outcome         ConversationOutcomeType
  sentiment       ConversationSentiment?
  hollyDecision   Json?    // Store Claude's full decision for analysis
  responseTime    Int?     // Minutes until lead responded (null if no response)
  booked          Boolean  @default(false) // Did they book a call?
  metadata        Json?    // Additional context
  createdAt       DateTime @default(now())
  lead            Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([outcome])
  @@index([booked])
  @@index([createdAt])
}

model ScheduledMessage {
  id           String               @id @default(cuid())
  leadId       String
  channel      CommunicationChannel
  content      String
  scheduledFor DateTime
  sent         Boolean              @default(false)
  sentAt       DateTime?
  cancelledAt  DateTime?
  metadata     Json?
  createdAt    DateTime             @default(now())
  lead         Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([scheduledFor])
  @@index([sent])
}

model Note {
  id        String   @id @default(cuid())
  leadId    String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([createdAt])
}

model Task {
  id          String    @id @default(cuid())
  leadId      String
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  assignedTo  String
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([completed])
  @@index([dueDate])
}

model AnalyticsTarget {
  id               String   @id @default(cuid())
  contactRateTarget      Float    @default(80)  // Target % of new leads to contact
  engagementRateTarget   Float    @default(60)  // Target % of contacted leads that engage
  bookingRateTarget      Float    @default(40)  // Target % of engaged leads that book calls
  conversionRateTarget   Float    @default(20)  // Target % of total leads that convert
  dealsWonRateTarget     Float    @default(70)  // Target % of converted leads that fund
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("analytics_targets")
}

model CallOutcome {
  id            String           @id @default(cuid())
  leadId        String
  appointmentId String?          // Optional - link to appointment if this was a scheduled call
  advisorName   String           // Greg Williamson, Jakub Huncik, etc.
  reached       Boolean          // Did the advisor actually speak with the lead?
  outcome       CallOutcomeType  // What's the next action?
  notes         String?          // Optional context from the call
  leadQuality   String?          // hot, warm, cold (optional quick assessment)
  createdAt     DateTime         @default(now())
  lead          Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([leadId])
  @@index([appointmentId])
  @@index([createdAt])
  @@index([outcome])
}

enum CallOutcomeType {
  READY_FOR_APP      // Lead is ready to apply, send Finmo link
  BOOK_DISCOVERY     // Lead wants formal discovery call, send Cal.com link
  FOLLOW_UP_SOON     // Lead interested but needs time (2-3 days), Holly pauses then resumes
  NOT_INTERESTED     // Lead not interested, move to LOST
  WRONG_NUMBER       // Invalid contact info
  NO_ANSWER          // Voicemail left, Holly continues nurturing
}

enum ConversationOutcomeType {
  ENGAGED            // Lead replied within 4 hours with positive/neutral response
  BOOKED             // Lead booked a call through Cal.com
  GHOSTED            // No reply after 24+ hours
  OPTED_OUT          // Lead said STOP/unsubscribe
  ESCALATED          // Holly escalated to human review
}

enum ConversationSentiment {
  POSITIVE           // Interested, engaged, asking questions
  NEUTRAL            // Acknowledged but non-committal
  NEGATIVE           // Not interested, frustrated, annoyed
}

enum LeadStatus {
  NEW
  CONTACTED
  ENGAGED
  CALL_SCHEDULED
  CALL_COMPLETED
  APPLICATION_STARTED
  CONVERTED
  DEALS_WON
  NURTURING
  LOST
}

enum CommunicationChannel {
  EMAIL
  SMS
  VOICE
  SYSTEM
}

enum ActivityType {
  STATUS_CHANGE
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  SMS_SENT
  SMS_RECEIVED
  CALL_INITIATED
  CALL_COMPLETED
  APPOINTMENT_BOOKED
  APPOINTMENT_CANCELLED
  NOTE_ADDED
  WEBHOOK_RECEIVED
}

model DevCard {
  id            String         @id @default(cuid())
  title         String
  description   String?
  screenshotUrl String?        // Base64 encoded screenshot
  type          DevCardType
  status        DevCardStatus  @default(NEW)
  priority      DevCardPriority @default(MEDIUM)
  createdBy     String         // User name or "HOLLY_AI"
  metadata      Json?          // AI-detected issues, evidence, suggestions
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deployedAt    DateTime?      // When moved to DEPLOYED
  comments      DevCardComment[]

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([createdAt])
}

model DevCardComment {
  id         String   @id @default(cuid())
  cardId     String
  content    String
  authorName String
  createdAt  DateTime @default(now())
  card       DevCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([createdAt])
}

enum DevCardType {
  FEATURE_REQUEST
  BUG_FIX
  IMPROVEMENT
  OPTIMIZATION
}

enum DevCardStatus {
  NEW
  IN_PROGRESS
  DEPLOYED
}

enum DevCardPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

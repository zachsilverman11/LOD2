generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id                String             @id @default(cuid())
  email             String             @unique
  phone             String?
  firstName         String
  lastName          String
  status            LeadStatus         @default(NEW)
  source            String?
  rawData           Json?
  consentEmail      Boolean            @default(false)
  consentSms        Boolean            @default(false)
  consentCall       Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastContactedAt   DateTime?
  convertedAt       DateTime?
  appointments      Appointment[]
  communications    Communication[]
  activities        LeadActivity[]
  notes             Note[]
  scheduledMessages ScheduledMessage[]
  tasks             Task[]

  @@index([email])
  @@index([phone])
  @@index([status])
  @@index([createdAt])
}

model LeadActivity {
  id        String                @id @default(cuid())
  leadId    String
  type      ActivityType
  channel   CommunicationChannel?
  subject   String?
  content   String?
  metadata  Json?
  createdAt DateTime              @default(now())
  lead      Lead                  @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([type])
  @@index([createdAt])
}

model Appointment {
  id               String   @id @default(cuid())
  leadId           String
  calComEventId    String?  @unique
  calComBookingUid String?  @unique
  scheduledAt      DateTime
  duration         Int
  status           String
  meetingUrl       String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lead             Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([scheduledAt])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  htmlBody  String
  textBody  String?
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmsTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  body      String
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationRule {
  id               String   @id @default(cuid())
  name             String
  description      String?
  triggerType      String
  triggerCondition Json
  actions          Json
  isActive         Boolean  @default(true)
  priority         Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([isActive])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  source    String
  eventType String?
  payload   Json
  processed Boolean  @default(false)
  error     String?
  createdAt DateTime @default(now())

  @@index([source])
  @@index([processed])
  @@index([createdAt])
}

model Communication {
  id         String               @id @default(cuid())
  leadId     String
  channel    CommunicationChannel
  direction  String
  content    String
  twilioSid  String?              @unique
  sendgridId String?              @unique
  sentiment  String?
  intent     String?
  metadata   Json?
  createdAt  DateTime             @default(now())
  lead       Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([channel])
  @@index([createdAt])
}

model ScheduledMessage {
  id           String               @id @default(cuid())
  leadId       String
  channel      CommunicationChannel
  content      String
  scheduledFor DateTime
  sent         Boolean              @default(false)
  sentAt       DateTime?
  cancelledAt  DateTime?
  metadata     Json?
  createdAt    DateTime             @default(now())
  lead         Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([scheduledFor])
  @@index([sent])
}

model Note {
  id        String   @id @default(cuid())
  leadId    String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([createdAt])
}

model Task {
  id          String    @id @default(cuid())
  leadId      String
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  assignedTo  String
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([completed])
  @@index([dueDate])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CALL_SCHEDULED
  CALL_COMPLETED
  CONVERTED
  LOST
  ENGAGED
  NURTURING
}

enum CommunicationChannel {
  EMAIL
  SMS
  VOICE
  SYSTEM
}

enum ActivityType {
  STATUS_CHANGE
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  SMS_SENT
  SMS_RECEIVED
  CALL_INITIATED
  CALL_COMPLETED
  APPOINTMENT_BOOKED
  APPOINTMENT_CANCELLED
  NOTE_ADDED
  WEBHOOK_RECEIVED
}
